{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","Fragment","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toogleMode","htmlFor","txt","toogleModeR","txtR","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","heading","rows","value","onChange","event","console","log","target","style","backgroundColor","color","sText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","length","Alert","alert","class","role","word","low","charAt","slice","capitalize","msg","PropType","PropTypes","string","isRequired","about","defaultProps","App","setMode","_useState3","_useState4","setTxt","_useState5","_useState6","setTxtR","_useState7","_useState8","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ba107284.chunk.js","sourcesContent":["import React from 'react'\r\n// imr\r\n\r\nimport PropTypes from 'prop-types'\r\n// import TextForm from \"./TextForm\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <div>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n          <div className=\"container-fluid\">\r\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n              <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                </li>\r\n                {/* <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                </li> */}\r\n              </ul>\r\n              {/* Dark mode - Light mode*/}\r\n              <div className={`form-check form-switch ${props.mode==='light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" type=\"checkbox\"  id=\"flexSwitchCheckDefault\" onClick={props.toogleMode} />\r\n                  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.txt}</label>\r\n              </div>\r\n              {/*  Red mode */}\r\n              <div className={`form-check form-switch mx-2 ${(props.mode==='light' || props.mode==='dark')? 'red' : 'light'}`}>\r\n                <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toogleModeR} />\r\n                  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.txtR}</label>\r\n              </div>\r\n\r\n              {/* red mode over */}\r\n            </div>\r\n          </div>\r\n        </nav>\r\n        <hr />\r\n      </div>\r\n      {/* <div className=\"container\">\r\n        <TextForm heading=\"Write your text Here\" mode={props.mode} />\r\n      </div> */}\r\n    </>\r\n  )\r\n}\r\n\r\nNavbar.PropType = {\r\n  title: PropTypes.string.isRequired, // specifies that value should be passed in title in app.js <navbar/> else-> error\r\n  about: PropTypes.string  //proptypes specifies the datatype to be passed \r\n}\r\n// default values to be passed incase no value is passed;\r\nNavbar.defaultProps = {\r\n  title: \"Default Title\",\r\n  about: \"Default About\"\r\n}\r\n","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"Enter the Text Here <*-*>\");\r\n  // below hooks is used : must be used inside function : value in useState(\"Enter the Text Here <*-*>\") is the default value which belongs to text , on updating setText Function is used.\r\n  // imp syntax :: can't update text like - text=\"dciudbcis\"; because its a state . for updation setText() can be used only like setText(\"ebfiwfbisfbi\")\r\n  const handleUpEvent =()=>{\r\n    console.log(\"up was clicked\");\r\n    let sText=text.toUpperCase();\r\n    setText(sText);\r\n    props.showAlert(\"Converted to UpperCase\",\"success\")\r\n  }\r\n  const handleDownEvent =()=>{\r\n    console.log(\"up was clicked\");\r\n    let sText=text.toLowerCase();\r\n    setText(sText);\r\n    props.showAlert(\"Converted to LowerCase\",\"success\")\r\n  }\r\n  const handleOnChange =(event)=>{\r\n    console.log(\"ONchecnga clicked\");\r\n    setText(event.target.value );\r\n  }\r\n  const handleClrEvent =(event)=>{\r\n    console.log(\"clr clicked\");\r\n    setText(\" \");\r\n  }\r\n  const handleCopy = () => {\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n}\r\n// javascript regexes used\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"))\r\n  }\r\n  return (\r\n    <>\r\n    <div>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text}  onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}}></textarea>\r\n            <button className='btn btn-primary my-2' onClick={handleUpEvent}>Convert to UpperCase</button>\r\n            <button className='btn btn-primary my-2 mx-2' onClick={handleDownEvent}>Convert to LowerCase</button>\r\n            <button className='btn btn-primary my-2 mx-2' onClick={handleClrEvent}>Clear Text</button>\r\n            <button className='btn btn-primary my-2 mx-2' onClick={handleCopy }>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove extra spaces</button>\r\n        </div>\r\n    </div>\r\n    <div className=\"container\">\r\n      <h1>Your Text Summary :</h1>\r\n      <p>Words : {text.split(\" \").length} </p>\r\n      <p>Characters : {text.length} </p>\r\n      <h1>Preview :</h1>\r\n      <p>{text.length>0?text:\"Enter something to preview 😃\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nTextForm.PropType={\r\n  heading: PropTypes.string\r\n}\r\nTextForm.defaultProps={\r\n  heading:\" Enter here :\"\r\n}\r\n","import React from 'react'\r\n\r\n\r\n// {/*   props.alert && ::will save from errors and not working site : blank site */}\r\nexport default function Alert(props) {\r\n    const capitalize =(word)=>{\r\n        let low=word.toLowerCase();\r\n        return low.charAt(0).toUpperCase() + low.slice(1);\r\n    }\r\n  return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)} : </strong> {props.alert.msg}\r\n        </div>\r\n\r\n  )\r\n}\r\n\r\n\r\n\r\n","import './App.css';\nimport React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n// import About from './Components/About';\nimport Alert from './Components/Alert';\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [txt, setTxt] = useState('Enable Dark Mode')\n  const [txtR, setTxtR] = useState('Enable Red Mode')\n  const toogleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      setTxt('Enable Light Mode');\n      document.body.style.backgroundColor = '#2d3131e3';\n      document.body.style.color = 'white';\n      showAlert(\"Dark Mode is Enabled.\", \"success\")\n      document.title = \"TextUtils-Dark Mode\";\n      // setInterval(() => {\n      //   document.title=\"hello use this\";\n\n      // }, 1500);\n      // setInterval(() => {\n      //   document.title=\"it is good\";\n\n      // }, 2000);\n    }\n    else {\n      setMode('light');\n      setTxt('Enable Dark Mode');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light Mode is Enabled.\", \"success\")\n      document.title = \"TextUtils-Light Mode\";\n    }\n  };\n  // red toogleMode \n  const toogleModeR = () => {\n    if (mode === 'light' || mode === 'dark') {\n      setMode('red');\n      setTxtR('Enable Light Mode');\n      document.body.style.backgroundColor = '#cc3e3e';\n      document.body.style.color = 'white';\n      showAlert(\"Red Mode is Enabled.\", \"success\")\n    }\n    else {\n      setMode('light');\n      setTxtR('Enable Red Mode');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light Mode is Enabled.\", \"success\")\n    }\n  };\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  return (\n    <>\n      \n      <Navbar title=\"TextUtils\"  mode={mode} toogleMode={toogleMode} txt={txt} toogleModeR={toogleModeR} txtR={txtR} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        <TextForm heading=\"Write your text Here\" mode={mode} showAlert={showAlert} />\n      </div>\n\n    </>\n  );\n};\n\nexport default App;\n\n// <Router>\n// <Navbar title=\"TextUtils\"  mode={mode} toogleMode={toogleMode} txt={txt} toogleModeR={toogleModeR} txtR={txtR} />\n// <Alert alert={alert} />\n// <div className=\"container\">\n//   <Routes>\n//     <Route exact path=\"/\" element={<TextForm heading=\"Write your text Here\" mode={mode} showAlert={showAlert} />}/>\n//     {/* <Route exact path=\"/about\" element={<About/>}/> */}\n//   </Routes>\n// </div>\n// </Router>\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}